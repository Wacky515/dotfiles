# Created:     2018/03/07 21:59:29
# Last Change: 2018/09/30 16:22:51.
# TODO: "hook_post_source"、"hook_post_source" は "*.vim" に移管

# 統合ユーザインターフェース
[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('python3')"
depends = ['neomru.vim']
# MEMO: ここは "*.vim" に移管できない
# hook_source = '''  # {{{
hook_source = '''
    call denite#custom#option('default', 'prompt', '>')
    call denite#custom#option('default', 'direction', 'top')
    call denite#custom#map('normal',
                \ '<C-n>', '<denite:move_to_next_line>')
    call denite#custom#map('normal',
                \ '<C-p>', '<denite:move_to_previous_line>')
    call denite#custom#map('insert',
                \ '<C-n>', '<denite:move_to_next_line>')
    call denite#custom#map('insert',
                \ '<C-p>', '<denite:move_to_previous_line>')

    call denite#custom#map('insert',
                \ '<C-j>', '<denite:assign_next_text>')
    call denite#custom#map('insert',
                \ '<C-k>', '<denite:assign_previous_text>')

    call denite#custom#map('insert',
                \ "<C-t>", '<denite:do_action:tabopen>')
    call denite#custom#map('insert',
                \ "<C-v>", '<denite:do_action:vsplit>')
    call denite#custom#map('normal',
                \ "v", '<denite:do_action:vsplit>')

    call denite#custom#map('insert',
                \ 'jj', '<denite:enter_mode:normal>')
    call denite#custom#map('insert',
                \ '<C-s>', '<denite:do_action:split>')
    call denite#custom#map('insert',
                \ '<C-i>', '<denite:do_action:vsplit>')
    call denite#custom#map('insert',
                \ '<C-o>', '<denite:do_action:tabopen>')

    call denite#custom#source(
                \ 'file_rec', 'matchers',
                \ ['matcher_fuzzy',
                \ 'matcher_project_files',
                \ 'matcher_ignore_globs'])

    call denite#custom#filter('matcher_ignore_globs',
                \ 'ignore_globs',
                \ [ '.git/', 'build/',
                \ '.ropeproject/', '__pycache__/',
                \ 'venv/', 'images/', 'img/',
                \ 'fonts/', 'img/', 'fonts/',
                \ 'images/', '*.o', '*.make', '*.min.*'])

    if executable('rg')
        call denite#custom#var('file_rec', 'command',
                \ ['rg', '--files', '--glob', '!.git'])
        call denite#custom#var('grep', 'command', ['rg'])
    endif
'''
# }}}
on_i = 1
on_cmd = ['Denite']
[[plugins]]
repo = 'Shougo/unite.vim'
# TODO: "Denite" 動作テスト完了後に
# 以下を復帰して "Unite" 使用完了
# if = "!has('python3')"
depends = ['neomru.vim']
# "Denite"|"Unite" 用 "mru"
[[plugins]]
repo = 'Shougo/neomru.vim'
# MEMO: "NeoVim" では無駄なディレクトリが生成される
if = "!has('nvim')"
on_source = ['dein.vim', 'denite.nvim', 'unite.vim']
on_path = '.*'
# "Denite"|"Unite" 用 "Source" 郡
# "Colorscheme" プレビュー
    # Ul: :Unite colorscheme でプレビュー
    # Dl: :Denite colorscheme でプレビュー
[[plugins]]
repo = 'ujihisa/unite-colorscheme'
# FIXME: ↓何も表示されない
# フォントプレビュー
    # ":Unite font" でプレビュー
    # ":Denite font" でプレビュー
[[plugins]]
repo = 'ujihisa/unite-font'
# 英和・和英辞書
[[plugins]]
repo = 'rhysd/unite-codic.vim'
[[plugins]]
repo = 'koron/codic-vim'

# 入力補完
# 最新
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('python3')"
<<<<<<< HEAD
# CHECK: ↓この記述可能か？
# if = "!has('python3') | has('***')"
=======
>>>>>>> bcd77225a462a599e95ca9e42ec670ef9e7b6654
# depends = ['context_filetype.vim', 'roxma/nvim-yarp', 'roxma/vim-hug-neovim-rpc']
depends = ['roxma/nvim-yarp', 'roxma/vim-hug-neovim-rpc']
on_i = 1
hook_add = '''  # {{{
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 0
'''  # }}}
on_event = ['InsertCharPre']
hook_source = '''  # {{{
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-l> deoplete#complete_common_string()
    inoremap <expr><C-i> deoplete#complete_common_string()
    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
                \ neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#file#enable_buffer_path = 1
    let g:deoplete#max_list = 10000
'''
    # "hook_add" と重複してるのでコメントアウト
    # let g:deoplete#enable_at_startup = 1
    # let g:deoplete#auto_complete_delay = 0
# }}}
# TEMP: "deoplete.vim" にて代替
# ---------------------------------------------------------------------------
# [[plugins]]
# repo = 'roxma/nvim-yarp'
# # if = "!has('nvim')"
# [[plugins]]
# repo = 'roxma/vim-hug-neovim-rpc'
# # if = "!has('nvim')"
# ---------------------------------------------------------------------------
# 2番目に新しい
<<<<<<< HEAD
# MEMO: "deoplete" とのコンフリクト確認のため一旦キル
# [[plugins]]
# repo = 'Shougo/neocomplete.vim'
# depends = ['context_filetype.vim']
=======
[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = ['context_filetype.vim']
>>>>>>> bcd77225a462a599e95ca9e42ec670ef9e7b6654
# # if = "!has('python3')"
# # if = "has('lua')"
# CHECK: ↓この記述可能か？
if = "!has('python3') | has('lua')"
# MEMO: この "hook_source" は "*.vim" に移管しない
hook_source = '''
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-l> neocomplete#complete_common_string()
inoremap <expr><C-i> neocomplete#complete_common_string()
'''
# on_i = 1
# 最古
[[plugins]] #  {{{
repo = 'Shougo/neocomplcache.vim'
if = "!has('python3')"
if = "!has('lua')"
# CHECK: ↓この記述可能か？
if = "!has('python3') | !has('lua')"
on_i = 1
# }}}

# スニペット
[[plugins]]
repo = 'Shougo/neosnippet'
# hook_source = '''  # {{{
#     imap <C-k> <Plug>(neosnippet_expand_or_jump)
#     smap <C-k> <Plug>(neosnippet_expand_or_jump)
#     xmap <C-k> <Plug>(neosnippet_expand_target)
#         if has('conceal')
#             set conceallevel=2 concealcursor=niv
#         endif
<<<<<<< HEAD
# '''
=======
# '''  # }}}
>>>>>>> bcd77225a462a599e95ca9e42ec670ef9e7b6654
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = ['snippet']
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# 非同期処理
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
    if dein#util#_is_windows()
        let cmd = 'tools\\update-dll-mingw'
    elseif dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
'''
# "NeoVim" の "Terminal" ラッパープラグイン
#[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"

# # Python用プラグイン
# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# on_ft = ['python']
# # Pythonシンタックスハイライト
# [[plugins]]
# repo = 'pfdevilliers/Pretty-Vim-Python'
# on_ft = ['python']
# 構文チェッカー
[[plugins]]
repo = 'w0rp/ale'
# # [[plugins]]
# # repo = 'scrooloose/syntastic'
# on_ft = ['python']
# # Python自動折りたたみ
# # [[plugins]]
# # repo = 'vim-scripts/python_fold'
# # on_ft = ['python']

# Markdown
# プレビュー
# <Leader>md: 編集中のファイルをブラウザで表示
[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown','mkd']
[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown','mkd']
# MEMO: ↓エラーになる
# hook_add = '''
#   let g:previm_open_cmd =
#            \'C:\\Program\ Files\ (x86)\\Google\\Chrome\\Application\\chrome.exe'
# '''
# シンタックスハイライト 1
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown','mkd']
# # シンタックスハイライト 2
# [[plugins]]
# repo = 'rcmdnk/vim-markdown'
# on_ft = ['markdown','mkd']
# hook_add = '''
#   let g:vim_markdown_frontmatter = 1
#   let g:vim_markdown_math = 1
# '''

# Fuzzy Matcher
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ 'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \ fzf#vim#with_preview({'options': '--exact --reverse'},
      \ 'right:50%:wrap'))
'''

# コピペ 履歴保存
# MEMO: "yankround" が使えないので一旦中止
# MEMO: 弊害が多いので "YankRnkg" -> "yankround" に変更
# ヤンク後に "<Ctrl>p/<Ctrl>n" でヤンク履歴を選択
[[plugins]]
repo = 'vim-scripts/YankRing.vim'
if = "!has('nvim')"
# < http://lambdalisue.hatenablog.com/entry/2013/06/23/071344 >
# repo = 'LeafCage/yankround.vim'

# フォントのサイズ変更
[[plugins]]
repo = 'thinca/vim-fontzoom'
on_cmd = ['Fontzoom']
on_map = ['<Plug>(fontzoom-']
gui = 1

# ---------------------------------------------------------------------------
# TODO: 動作確認
# ---------------------------------------------------------------------------
# {{{
# # カラーコード プレビュー
# [[plugins]]
# repo = 'gorodinskiy/vim-coloresque'

# # Arduino開発用プラグイン
# [[plugins]]
# repo = "platformio/platformio"
# on_ft = ["arduino"]
# # Arduinoシンタックスハイライト
# [[plugins]]
# repo = "sudar/vim-arduino-syntax"
# on_ft = ["arduino"]
# }}}

# ---------------------------------------------------------------------------
# TODO: 導入予定
# ---------------------------------------------------------------------------
