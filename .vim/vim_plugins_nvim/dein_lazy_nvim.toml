# Created:     2018/12/19 08:50:01
# Last Change: 2019/07/02 20:46:04.
# TODO: "hook_post_source"、"hook_post_source" を "*.vim" に移管

# 統合ユーザインターフェース
[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('python3')"
# "E892: 文字列を浮動小数点数として扱っています" のためKILL
# depends = ['neomru.vim']
# MEMO: ↓は "*.vim" に移管できない
hook_source = '''  " {{{
    " プロンプトを ">" にする
    call denite#custom#option('default', {
                \ 'auto_accel': v:true,
                \ 'prompt': '>',
                \ 'source_names': 'short',
                \ })
    call denite#custom#option('default', 'direction', 'top')

    " <C-n>/<C-p>: 上下移動
    call denite#custom#map('normal',
                \ '<C-n>', '<denite:move_to_next_line>')
    call denite#custom#map('normal',
                \ '<C-p>', '<denite:move_to_previous_line>')
    call denite#custom#map('insert',
                \ '<C-n>', '<denite:move_to_next_line>')
    call denite#custom#map('insert',
                \ '<C-p>', '<denite:move_to_previous_line>')

    " <C-j>/<C-k>: 入力履歴移動
    call denite#custom#map('insert',
                \ '<C-j>', '<denite:assign_next_text>')
    call denite#custom#map('insert',
                \ '<C-k>', '<denite:assign_previous_text>')

    " <C-t>: "tabopen"
    call denite#custom#map('insert',
                \ "<C-t>", '<denite:do_action:tabopen>')
    " <C-v>: "vsplit"
    call denite#custom#map('insert',
                \ "<C-v>", '<denite:do_action:vsplit>')
    call denite#custom#map('normal',
                \ "v", '<denite:do_action:vsplit>')

    " jj :ノーマルモード
    call denite#custom#map('insert',
                \ 'jj', '<denite:enter_mode:normal>')
    " <C-s>: 水平画面分割して開く
    call denite#custom#map('insert',
                \ '<C-s>', '<denite:do_action:split>')
    " <C-i>: 垂直画面分割して開く
    call denite#custom#map('insert',
                \ '<C-i>', '<denite:do_action:vsplit>')
    " <C-o>: 新規タブで開く
    call denite#custom#map('insert',
                \ '<C-o>', '<denite:do_action:tabopen>')

"     " The Silver searcher
"     if executable('ag')
"         let s:ignore_globs = [
"                     \ '.git',
"                     \ '.svn',
"                     \ 'node_modules'
"                     \ ]
"
"         " 検索対象から以下を除外
"         call denite#custom#var(
"                     \ 'file/rec',
"                     \ 'command', [
"                     \ 'ag',
"                     \ '--follow',]
"                     \ + map(deepcopy(s:ignore_globs),
"                     \ { k, v -> '--ignore=' . v }) + [
"                     \ '--nocolor',
"                     \ '--nogroup',
"                     \ '-g'
"                     \ ''
"                     \ ])
"
"         " "file_rec" 検索時に "FuzzyMatch" を有効にし
"         " 検索対象から指定のファイルを除外
"         call denite#custom#source(
"                     \ 'file/rec',
"                     \ 'matchers', [
"                     \ 'matcher_fuzzy',
"                     \ 'matcher_project_files',
"                     \ 'matcher_ignore_globs'])
"
"         " 他ソース向けに "ignore_globs" 初期化
"         call denite#custom#filter(
"                     \ 'ignore_globs',
"                     \ 'matcher/ignore_globs',
"                     \ s:ignore_globs
"                     \ )
"     endif

    " RipGrep
    if executable('rg')
        " 検索対象から以下を除外
<<<<<<< HEAD
        call denite#custom#var('file_rec', 'command',
                    \ ['rg', '--files', '--glob', '!.git'])
        call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
                    \ ['--vimgrep', '--no-heading'])
    else
        call denite#custom#var('file_rec', 'command',
                    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    endif

    call denite#custom#source('file_old', 'matchers',
                \ ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source('tag', 'matchers', ['matcher_substring'])
    if has('nvim')
        call denite#custom#source('file_rec,grep', 'matchers',
                    \ ['matcher_cpsm'])
    endif
    call denite#custom#source('file_old', 'converters',
                \ ['converter_relative_word'])

    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])
=======
        call denite#custom#var(
                    \ 'command',
                    \ 'file/rec',
                    \ ['ag',
                    \ '--follow',]
                    \ + map(deepcopy(s:ignore_globs),
                    \ { k, v -> '--ignore=' . v }) + [
                    \ '',
                    \ '--nocolor',
                    \ '--nogroup',
                    \ '-g'])
>>>>>>> 3b9db9dd539af5d1057b0ee29cce45efa35f44b9

    let s:menus = {}
    let s:menus.vim = {
        \ 'description': 'Vim',
        \ }
    let s:menus.vim.file_candidates = [
        \ ['    > Edit configuation file (init.vim)', '~/.config/nvim/init.vim']
        \ ]
    call denite#custom#var('menu', 'menus', s:menus)

    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    call denite#custom#action('file', 'buffer',
        \ {context -> denite#do_action(context, 'open', context['targets'])})

    " FuzzyMatch
    if executable('matcher_fuzzy')
        " "file_rec" 検索時に "FuzzyMatch" を有効にし
        " 検索対象から指定のファイルを除外
        call denite#custom#source(
                    \ 'file_rec',
                    \ 'matchers',
                    \ ['matcher_fuzzy',
                    \ 'matcher_project_files',
                    \ 'matcher_ignore_globs'])

        " 検索対象外のファイル指定
        call denite#custom#filter(
                    \ 'ignore_globs',
<<<<<<< HEAD
                    \ 'matcher_ignore_globs',
                    \ s:ignore_globs,
                    \ ['*.make',
                    \ '*.min.*',
                    \ '*.o',
                    \ '.git/',
                    \ '.ropeproject/',
                    \ '__pycache__/',
                    \ 'build/',
                    \ 'fonts/',
                    \ 'images/',
                    \ 'img/',
                    \ 'venv/',
                    \ 'ropeproject/'])
    endif
=======
                    \ 'matcher/ignore_globs',
                    \ s:ignore_globs)

    endif

"     " RipGrep
"     if executable('rg')
"         " 検索対象から以下を除外
"         call denite#custom#var(
"                     \ 'command',
"                     \ 'grep',
"                     \ 'file_rec',
"                     \ ['!.git',
"                     \ '--files',
"                     \ '--glob',
"                     \ 'rg'])
"         let g:denite_source_grep_command = 'rg'
"         let g:denite_source_grep_default_opts = '-n --no-heading --color never'
"         let g:unite_source_grep_recursive_opt = ''
"         " Hit数制御
"         let g:unite_source_grep_max_candidates = 200
"         " "Windows" 設定
"         let g:unite_source_grep_encoding='utf-8'
"     endif

"     " FuzzyMatch
"     if executable('matcher_fuzzy')
"         " "file_rec" 検索時に "FuzzyMatch" を有効にし
"         " 検索対象から指定のファイルを除外
"         call denite#custom#source(
"                     \ 'file_rec',
"                     \ 'matchers',
"                     \ ['matcher_fuzzy',
"                     \ 'matcher_project_files',
"                     \ 'matcher_ignore_globs'])

"         " 検索対象外のファイル指定
"         call denite#custom#filter(
"                     \ 'ignore_globs',
"                     \ 'matcher_ignore_globs',
"                     \ s:ignore_globs,
"                     \ ['*.make',
"                     \ '*.min.*',
"                     \ '*.o',
"                     \ '.git/',
"                     \ '.ropeproject/',
"                     \ '__pycache__/',
"                     \ 'build/',
"                     \ 'fonts/',
"                     \ 'images/',
"                     \ 'img/',
"                     \ 'venv/',
"                     \ 'ropeproject/'])
"     endif
>>>>>>> 3b9db9dd539af5d1057b0ee29cce45efa35f44b9
'''  # }}}
on_i = 1
on_cmd = ['Denite']
# "Denite|Unite" 用 "Source" 郡
# "Colorscheme" プレビュー
    # Ul: :Unite colorscheme でプレビュー
    # Dl: :Denite colorscheme でプレビュー
# "Denite|Unite" 用 "mru"
# "E892: 文字列を浮動小数点数として扱っています" のためKILL
[[plugins]]
repo = 'Shougo/neomru.vim'
if = "has('mac')"
on_source = ['dein.vim', 'unite.vim', 'denite.nvim']
on_path = '.*'
[[plugins]]
repo = 'koron/codic-vim'
# "NyaoVim" と "OniVim" で必要
[[plugins]]
repo = 'Shougo/unite.vim'

# 入力補完
# 最新
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"
# if = "has('python3')"
on_i = 1
hook_add = '''  " {{{
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 0
'''  # }}}
on_event = ['InsertCharPre']
hook_source = '''  " {{{
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-l> deoplete#complete_common_string()
    inoremap <expr><C-i> deoplete#complete_common_string()
    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
                \ neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"

    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#file#enable_buffer_path = 1
    let g:deoplete#max_list = 10000
'''  # }}}
[[plugins]]
repo = 'Shougo/deoplete-rct'
[[plugins]]
repo = 'Shougo/neco-vim'
[[plugins]]
repo = 'Shougo/neco-syntax'
[[plugins]]
repo = 'ujihisa/neco-look'

# 構文解析
[[plugins]]
repo = 'w0rp/ale'
if = "has('job') && has('channel') && has('timers')"
[[plugins]]
repo = 'scrooloose/syntastic'
if = "!has('job') || !has('channel') || !has('timers')"

# スニペット
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = ['snippet']
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# "NeoVim" の "Terminal" ラッパープラグイン
[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"

# Markdown
# プレビュー
[[plugins]]
repo = 'kannokanno/previm'
# MEMO: markdownしか対応していない
on_ft = ['markdown','mkd']
[[plugins]]
repo = 'tyru/open-browser.vim'
# MEMO: markdownしか対応していない
on_ft = ['markdown','mkd']
# シンタックスハイライト
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
'''

# Fuzzy Matcher
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ 'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \ fzf#vim#with_preview({'options': '--exact --reverse'},
      \ 'right:50%:wrap'))
'''

# フォントのサイズ変更
[[plugins]]
repo = 'thinca/vim-fontzoom'
# on_cmd = ['Fontzoom']
# on_map = ['<Plug>(fontzoom-']
gui = 1

