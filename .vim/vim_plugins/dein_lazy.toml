# Created:     2018/03/07 21:59:29
# Last Change: 2019/01/10 17:14:50.
# TODO: "hook_post_source"、"hook_post_source" を "*.vim" に移管

# 統合ユーザインターフェース
[[plugins]]
repo = 'Shougo/unite.vim'
# TODO: "Denite" 動作テスト完了後に
# ↓を復帰して "Unite" 使用完了
# if = "!has(te'python3')"
depends = ['neomru.vim']
[[plugins]]
repo = 'ujihisa/unite-colorscheme'
# FIXME: ↓何も表示されない
# フォントプレビュー
    # ":Unite font" でプレビュー
    # ":Denite font" でプレビュー
[[plugins]]
repo = 'ujihisa/unite-font'
# 英和・和英辞書
[[plugins]]
repo = 'rhysd/unite-codic.vim'

# 入力補完
# 最新
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('python3') && has('timers')"
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
on_i = 1
hook_add = '''  " {{{
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 0
'''  # }}}
on_event = ['InsertCharPre']
hook_source = '''  " {{{
    inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-l> deoplete#complete_common_string()
    inoremap <expr><C-i> deoplete#complete_common_string()
    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
                \ neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"

    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#file#enable_buffer_path = 1
    let g:deoplete#max_list = 10000
'''  # }}}
[[plugins]]
repo = 'roxma/nvim-yarp'
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

# 2番目に新しい
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "!has('nvim') && has('lua') && (hostname() =='HBAMB748' || hostname() =='HBAMB819')"
# if = "!has('nvim') && has('lua')"
# if = "!has('python3') && !has('timers') && has('lua')"
depends = ['context_filetype.vim']
on_i = 1
# MEMO: この "hook_source" は条件分岐の為 "*.vim" に移管しない
hook_source = '''  " {
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''  # }}}
# 最古
[[plugins]]
repo = 'Shougo/neocomplcache.vim'
if = "!has('python3') && !has('lua')"
on_i = 1
# }}}

# 非同期処理
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
    if dein#util#_is_windows()
        let cmd = 'tools\\update-dll-mingw'
    elseif dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
'''

# FIXME: 起動時エラーのためKILL
# [[plugins]]
# repo = 'Shougo/unite-outline'
# depends = 'unite.vim'
# hook_add = 'source ~/.vim/userautoload/plugins/plugins-unite-outline.vim'
# [[plugins]]
# repo = 'tsukkee/unite-tag.git'

# MEMO: dein_python.toml に移管
# # Python用プラグイン
# [[plugins]]  # {{{
# repo = 'davidhalter/jedi-vim'
# on_ft = ['python']
# # Pythonシンタックスハイライト
# [[plugins]]
# repo = 'pfdevilliers/Pretty-Vim-Python'
# on_ft = ['python']
# # Python自動折りたたみ
# # [[plugins]]
# # repo = 'vim-scripts/python_fold'
# # on_ft = ['python']
# }}}

# Markdown
# # シンタックスハイライト  # {{{
# [[plugins]]
# repo = 'plasticboy/vim-markdown'
# on_ft = ['markdown','mkd']
# hook_add = '''
#     let g:vim_markdown_folding_disabled = 1
#     let g:vim_markdown_auto_insert_bullets = 0
#     let g:vim_markdown_new_list_item_indent = 0
# '''  # }}}

# ---------------------------------------------------------------------------
# TODO: 動作確認
# ---------------------------------------------------------------------------
# {{{
# # カラーコード プレビュー
# [[plugins]]
# repo = 'gorodinskiy/vim-coloresque'

# # Arduino開発用プラグイン
# [[plugins]]
# repo = "platformio/platformio"
# on_ft = ["arduino"]
# # Arduinoシンタックスハイライト
# [[plugins]]
# repo = "sudar/vim-arduino-syntax"
# on_ft = ["arduino"]
# }}}

# ---------------------------------------------------------------------------
# TODO: 導入予定
# ---------------------------------------------------------------------------

