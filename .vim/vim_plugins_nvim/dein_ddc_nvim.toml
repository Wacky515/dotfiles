# Created:     2022/02/21 11:16:34
# Last Change: 2022/03/27 14:42:29.

# 入力補完
[[plugins]]
 repo = 'Shougo/ddc.vim'
 on_event = 'InsertEnter'
 depends = ['denops.vim']
 hook_source = '''
 call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'vsnip'])
 call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \ 'matchers':   ['matcher_head'],
      \ 'sorters':    ['sorter_rank'],
      \ 'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {'mark': 'A'},
      \ 'nvim-lsp': {
      \ 'mark': 'L',
      \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ },
      \ })

 call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

 inoremap <silent><expr> <TAB>
      \ ddc#map#pum_visible() ? '<C-n>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#map#manual_complete()
 inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

 call ddc#enable()
'''

# 必須プラグイン
[[plugins]]
 repo = 'vim-denops/denops.vim'
 on_source = 'ddc.vim'

# ポップアップ表示
[[plugins]]
 repo = 'Shougo/pum.vim'
 on_source = 'ddc.vim'

# Source
# カーソル近傍の既出単語補完
[[plugins]]
 repo = 'Shougo/ddc-around'
 on_source = 'ddc.vim'
# ファイル名補完
[[plugins]]
 repo = 'LumaKernel/ddc-file'
 on_source = 'ddc.vim'

# Filter
 # 入力中の単語を補完対象にする
[[plugins]]
 repo = 'Shougo/ddc-matcher_head'
 on_source = 'ddc.vim'

# 補完候補のソート
[[plugins]]
 repo = 'Shougo/ddc-sorter_rank'
 on_source = 'ddc.vim'

# 補完候補の重複防止
[[plugins]]
 repo = 'Shougo/ddc-converter_remove_overlap'
 on_source = 'ddc.vim'

# LSP
[[plugins]]
 repo = 'Shougo/ddc-nvim-lsp'
 on_source = 'ddc.vim'

[[plugins]]
 repo = 'hrsh7th/vim-vsnip'
 on_event = 'InsertEnter'
 depends = ['vim-vsnip-integ', 'friendly-snippets']
 hook_add = '''
 imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' :    '<C-j>'
 smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' :    '<C-j>'
 imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
 smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
 imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
 smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
 let g:vsnip_filetypes = {}
 '''
[[plugins]]
 repo = 'hrsh7th/vim-vsnip-integ'
[[plugins]]
 repo = 'rafamadriz/friendly-snippets'

[[plugins]]
 repo = 'neovim/nvim-lspconfig'
 on_event = 'BufEnter'
 hook_source = '''
 lua << EOF
 local nvim_lsp = require('lspconfig')
 local on_attach = function (client, bufnr)
 local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
 local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

local opts = { noremap=true, silent=true }
 buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
 buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
 buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
 buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
 buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
 buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
 buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
 buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
end

 local lsp_installer = require("nvim-lsp-installer")
 lsp_installer.on_server_ready(function(server)
   local opts = {}
   opts.on_attach = on_attach
   server:setup(opts)
   vim.cmd [[ do User LspAttachBuffers ]]
 end)
EOF
'''
[[plugins]]
 repo ='williamboman/nvim-lsp-installer'
 on_source = 'nvim-lspconfig'
[[plugins]]
 repo = 'matsui54/denops-signature_help'
 on_source = 'ddc.vim'
 hook_source = '''
 call signature_help#enable()
'''
[[plugins]]
 repo = 'matsui54/denops-popup-preview.vim'
 on_source = 'ddc.vim'
 hook_source = '''
 call popup_preview#enable()
'''

# セレクタ
# MEMO: 以下は他の "dein_*.toml" と重複
# [[plugins] # {{{
#  repo = 'junegunn/fzf'
#  merged = 0
#  build = '''
#  ./install --all
# '''

# [[plugins]]
#  repo = 'junegunn/fzf.vim'
#  hook_add = '''
#  nnoremap <silent> <Leader>. :<C-u>FZFFileList<CR>
#  nnoremap <silent> <Leader>, :<C-u>FZFMru<CR>
#  nnoremap <silent> <Leader>l :<C-u>Lines<CR>
#  nnoremap <silent> <Leader>b :<C-u>Buffers<CR>
#  nnoremap <silent> <Leader>k :<C-u>Rg<CR>
#  command! FZFFileList call fzf#run({
#             \ 'source': 'rg --files --hidden',
#             \ 'sink': 'e',
#             \ 'options': '-m --border=none',
#             \ 'down': '20%'})
#  command! FZFMru call fzf#run({
#             \ 'source': v:oldfiles,
#             \ 'sink': 'e',
#             \ 'options': '-m +s --border=none',
#             \ 'down':  '20%'})

#  let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'none' } }
#
#  augroup vimrc_fzf
#  autocmd!
#  autocmd FileType fzf tnoremap <silent> <buffer> <Esc> <C-g>
#  autocmd FileType fzf set laststatus=0 noshowmode noruler
#       \| autocmd BufLeave <buffer> set laststatus=2 noshowmode ruler
#  augroup END

#  function! RipgrepFzf(query, fullscreen)
#     let command_fmt = 'rg --column --hiddden --line-number --no-heading --color=always --smart-case %s || true'
#     let initial_command = printf(command_fmt, shellescape(a:query))
#     let reload_command = printf(command_fmt, '{q}')
#     let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
#     call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
#  endfunction

#  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
# '''
# }}}

